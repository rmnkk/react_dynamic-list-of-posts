{"version":3,"sources":["components/PostsList/PostsList.jsx","components/NewCommentForm/NewCommentForm.jsx","api/api.js","api/comments.js","components/PostDetails/PostDetails.jsx","api/posts.js","App.jsx","index.js"],"names":["PostsList","posts","onPostSelection","selectedPostId","onPostClosing","className","length","map","post","key","id","userId","title","type","onClick","defaultProps","NewCommentForm","postId","onCommentAddition","useState","inputName","setName","email","setEmail","body","setBody","handleInputChange","event","target","name","value","trimLeft","onSubmit","e","preventDefault","placeholder","onChange","required","BASE_URL","getPostComments","a","fetch","response","json","result","data","filter","comment","request","method","JSON","stringify","PostDetails","comments","setComments","showComments","setShowComments","useEffect","then","res","handleCommentsDisplay","handleCommentDeletion","commentId","deleteComment","addComment","App","selectedUser","setSelectedUser","setPosts","setSelectedPostId","selectedPost","setSelectedPost","getUserPosts","getPostDetails","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.01b764e6.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './PostsList.scss';\n\nexport const PostsList = ({\n  posts,\n  onPostSelection,\n  selectedPostId,\n  onPostClosing,\n}) => (\n  <div className=\"PostsList\">\n    <h2>{`Posts:${posts.length}`}</h2>\n\n    <ul className=\"PostsList__list\">\n      {posts.map(post => (\n        <li\n          className=\"PostsList__item\"\n          key={post.id}\n        >\n          <div>\n            <b>\n              {`[User #${post.userId}]:`}\n            </b>\n            {post.title}\n          </div>\n          {post.id !== selectedPostId && (\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => {\n                onPostSelection(post.id);\n              }}\n            >\n              Open\n            </button>\n          )}\n\n          {post.id === selectedPostId && (\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={onPostClosing}\n            >\n              Close\n            </button>\n          )}\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n\nPostsList.defaultProps = {\n  posts: [],\n};\n\nPostsList.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.shape(PropTypes.string)),\n  onPostSelection: PropTypes.func.isRequired,\n  selectedPostId: PropTypes.number.isRequired,\n  onPostClosing: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({ postId, onCommentAddition }) => {\n  const [inputName, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n\n    if (name === 'name') {\n      setName(value.trimLeft());\n    }\n\n    if (name === 'email') {\n      setEmail(value.trimLeft());\n    }\n\n    if (name === 'body') {\n      setBody(value.trimLeft());\n    }\n  };\n\n  const handleFormSubmit = () => {\n    onCommentAddition(postId, inputName, email, body);\n\n    setName('');\n\n    setEmail('');\n\n    setBody('');\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={(e) => {\n        e.preventDefault();\n        handleFormSubmit();\n      }}\n    >\n      <div className=\"form-field\">\n        <input\n          value={inputName}\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          onChange={(e) => {\n            handleInputChange(e);\n          }}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          value={email}\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          onChange={(e) => {\n            handleInputChange(e);\n          }}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          value={body}\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          onChange={(e) => {\n            handleInputChange(e);\n          }}\n          required\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  postId: PropTypes.number.isRequired,\n  onCommentAddition: PropTypes.func.isRequired,\n};\n","export const BASE_URL = 'https://mate-api.herokuapp.com';\n","import { BASE_URL } from './api';\n\nexport async function getPostComments(postId) {\n  const response = await fetch(`${BASE_URL}/comments`);\n\n  const result = await response.json();\n\n  return result.data.filter(comment => comment.postId === postId);\n}\n\nexport async function addComment(postId, name, email, body) {\n  const request = {\n    method: 'POST',\n    body: JSON.stringify({\n      postId,\n      name,\n      email,\n      body,\n    }),\n  };\n\n  const response = await fetch(`${BASE_URL}/comments`, request);\n\n  return response.json();\n}\n\nexport async function deleteComment(id) {\n  const request = {\n    method: 'DELETE',\n  };\n\n  const response = await fetch(`${BASE_URL}/comments/${id}`, request);\n\n  return response.json();\n}\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { getPostComments, deleteComment, addComment } from '../../api/comments';\n\nexport const PostDetails = ({ id, body }) => {\n  const [comments, setComments] = useState([]);\n  const [showComments, setShowComments] = useState(true);\n\n  useEffect(() => {\n    getPostComments(+id).then(res => setComments(res));\n  }, [id]);\n\n  const handleCommentsDisplay = () => {\n    setShowComments(!showComments);\n  };\n\n  const handleCommentAddition = (postId, inputName, email, comment) => {\n    addComment(postId, inputName, email, comment)\n      .then(() => {\n        getPostComments(+id).then(res => setComments(res));\n      });\n  };\n\n  const handleCommentDeletion = (commentId) => {\n    deleteComment(commentId)\n      .then(() => {\n        getPostComments(+id).then(res => setComments(res));\n      });\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{body}</p>\n      </section>\n\n      {comments.length > 0 && (\n        <section className=\"PostDetails__comments\">\n          {showComments && (\n            <button\n              onClick={handleCommentsDisplay}\n              type=\"button\"\n              className=\"button\"\n            >\n              {`Show ${comments.length} comments`}\n            </button>\n          )}\n\n          {!showComments && (\n            <button\n              onClick={handleCommentsDisplay}\n              type=\"button\"\n              className=\"button\"\n            >\n              {`Hide ${comments.length} comments`}\n            </button>\n          )}\n\n          {!showComments && (\n            <ul className=\"PostDetails__list\">\n              {comments.map(comment => (\n                <li\n                  key={comment.body}\n                  className=\"PostDetails__list-item\"\n                >\n                  <button\n                    type=\"button\"\n                    className=\"PostDetails__remove-button button\"\n                    onClick={() => {\n                      handleCommentDeletion(comment.id);\n                    }}\n                  >\n                    X\n                  </button>\n                  <p>{comment.body}</p>\n                  <p>{comment.id}</p>\n                </li>\n              ))}\n            </ul>\n          )}\n        </section>\n      )}\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            postId={id}\n            onCommentAddition={handleCommentAddition}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  id: PropTypes.number.isRequired,\n  body: PropTypes.string.isRequired,\n};\n","import { BASE_URL } from './api';\n\nexport async function getUserPosts(userId) {\n  const response = await fetch(`${BASE_URL}/posts`);\n\n  const result = await response.json();\n\n  return userId\n    ? result.data.filter(post => post.userId === userId)\n    : result.data;\n}\n\nexport async function getPostDetails(postId) {\n  const response = await fetch(`${BASE_URL}/posts/${+postId}`);\n\n  const result = await response.json();\n\n  return result.data;\n}\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getPostDetails, getUserPosts } from './api/posts';\n\nconst App = () => {\n  const [selectedUser, setSelectedUser] = useState(0);\n  const [posts, setPosts] = useState([]);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n  const [selectedPost, setSelectedPost] = useState(null);\n\n  useEffect(() => {\n    getUserPosts(selectedUser).then(res => setPosts(res));\n  }, [selectedUser]);\n\n  const getUserId = (event) => {\n    const { value } = event.target;\n\n    setSelectedUser(+value);\n  };\n\n  const handlePostSelection = (postId) => {\n    setSelectedPostId(postId);\n\n    getPostDetails(postId).then(res => setSelectedPost(res));\n  };\n\n  const handlePostClosing = () => {\n    setSelectedPostId(null);\n\n    setSelectedPost(null);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={getUserId}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            onPostSelection={handlePostSelection}\n            onPostClosing={handlePostClosing}\n            selectedPostId={selectedPostId}\n            posts={posts}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPost && <PostDetails {...selectedPost} />}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}